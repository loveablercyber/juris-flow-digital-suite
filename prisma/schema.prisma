// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuário
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  processes     Process[]     @relation("ProcessUsers")
  documents     Document[]
  appointments  Appointment[]
  notes         Note[]
  messages      Message[]     @relation("MessageSender")
  receivedMessages Message[]  @relation("MessageReceiver")
  attendances   Attendance[]
  notifications Notification[]

  @@map("users")
}

// Modelo de Processo
model Process {
  id              String   @id @default(uuid())
  number          String
  title           String
  description     String?
  type            String
  area            String
  status          String
  court           String?
  judge           String?
  instance        String?
  priority        String?
  emergency       Boolean  @default(false)
  startDate       DateTime
  nextHearing     DateTime?
  distributionDate DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  users           User[]         @relation("ProcessUsers")
  documents       Document[]
  appointments    Appointment[]
  payments        Payment[]
  tasks           Task[]
  notes           Note[]
  messages        Message[]
  attendances     Attendance[]

  @@map("processes")
}

// Modelo de Documento
model Document {
  id          String   @id @default(uuid())
  title       String
  description String
  type        String
  fileUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  processId   String
  process     Process  @relation(fields: [processId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("documents")
}

// Modelo de Compromisso
model Appointment {
  id          String   @id @default(uuid())
  title       String
  description String
  type        String
  status      String
  startDate   DateTime
  endDate     DateTime
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  processId   String?
  process     Process? @relation(fields: [processId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("appointments")
}

// Modelo de Pagamento
model Payment {
  id            String   @id @default(uuid())
  amount        Float
  description   String
  type          String
  status        String
  dueDate       DateTime
  paymentDate   DateTime?
  paymentMethod String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  processId     String
  process       Process  @relation(fields: [processId], references: [id])

  @@map("payments")
}

// Modelo de Tarefa
model Task {
  id          String   @id @default(uuid())
  title       String
  description String
  status      String
  dueDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  processId   String
  process     Process  @relation(fields: [processId], references: [id])

  @@map("tasks")
}

// Modelo de Nota
model Note {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  processId String
  process   Process @relation(fields: [processId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@map("notes")
}

// Modelo de Mensagem
model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  processId  String
  process    Process @relation(fields: [processId], references: [id])
  senderId   String
  sender     User    @relation("MessageSender", fields: [senderId], references: [id])
  receiverId String
  receiver   User    @relation("MessageReceiver", fields: [receiverId], references: [id])

  @@map("messages")
}

// Modelo de Atendimento
model Attendance {
  id          String   @id @default(uuid())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  processId   String
  process     Process @relation(fields: [processId], references: [id])
  userId      String
  user        User    @relation(fields: [userId], references: [id])

  @@map("attendances")
}

// Modelo de Notificação
model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  processId String?
  process   Process? @relation(fields: [processId], references: [id])

  @@map("notifications")
} 