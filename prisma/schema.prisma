// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelo de Usuário
model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  password      String
  role          UserRole      @default(LAWYER)
  status        UserStatus    @default(active)
  photoUrl      String?
  whatsappNumber String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  processes     Process[]
  clients       Client[]
  documents     Document[]
  notes         Note[]
  appointments  Appointment[]

  // Campos para atendimento online
  isOnline        Boolean   @default(false)
  lastLogin       DateTime?

  // Relacionamentos
  messages      Message[]     @relation("MessageSender")
  receivedMessages Message[]  @relation("MessageReceiver")
  attendances   Attendance[]
  notifications Notification[]

  @@map("users")
}

// Modelo de Processo
model Process {
  id              String        @id @default(uuid())
  number          String        @unique
  title           String
  description     String?
  type            String
  area            String
  status          ProcessStatus @default(AGUARDANDO)
  court           String?
  judge           String?
  instance        String?
  priority        Priority      @default(MEDIA)
  emergency       Boolean       @default(false)
  startDate       DateTime
  nextHearing     DateTime?
  distributionDate DateTime?
  userId          String
  clientId        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  client          Client?       @relation(fields: [clientId], references: [id])
  documents       Document[]
  payments        Payment[]
  tasks           Task[]
  notes           Note[]
  appointments    Appointment[]
  messages      Message[]
  attendances   Attendance[]
  notifications Notification[]

  @@map("processes")
}

// Modelo de Documento
model Document {
  id          String    @id @default(uuid())
  name        String
  type        String
  description String?
  fileUrl     String
  tags        String?
  userId      String
  processId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  process     Process?  @relation(fields: [processId], references: [id])

  @@map("documents")
}

// Modelo de Compromisso
model Appointment {
  id          String            @id @default(uuid())
  title       String
  description String
  type        AppointmentType
  status      AppointmentStatus @default(AGENDADO)
  startDate   DateTime
  endDate     DateTime
  location    String?
  processId   String?
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  process     Process?          @relation(fields: [processId], references: [id])
  user        User              @relation(fields: [userId], references: [id])

  @@map("appointments")
}

// Modelo de Pagamento
model Payment {
  id            String          @id @default(uuid())
  amount        Float
  description   String
  type          PaymentType
  status        PaymentStatus   @default(PENDENTE)
  dueDate       DateTime
  paymentDate   DateTime?
  paymentMethod String?
  processId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  process       Process         @relation(fields: [processId], references: [id])

  @@map("payments")
}

// Modelo de Tarefa
model Task {
  id          String      @id @default(uuid())
  title       String
  description String
  status      TaskStatus  @default(PENDENTE)
  dueDate     DateTime
  processId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  process     Process     @relation(fields: [processId], references: [id])

  @@map("tasks")
}

// Modelo de Nota
model Note {
  id        String   @id @default(uuid())
  content   String
  processId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  process   Process  @relation(fields: [processId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("notes")
}

// Modelo de Mensagem
model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  processId  String
  process    Process @relation(fields: [processId], references: [id])
  senderId   String
  sender     User    @relation("MessageSender", fields: [senderId], references: [id])
  receiverId String
  receiver   User    @relation("MessageReceiver", fields: [receiverId], references: [id])

  @@map("messages")
}

// Modelo de Atendimento
model Attendance {
  id          String   @id @default(uuid())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  processId   String
  process     Process @relation(fields: [processId], references: [id])
  userId      String
  user        User    @relation(fields: [userId], references: [id])

  @@map("attendances")
}

// Modelo de Notificação
model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  processId String?
  process   Process? @relation(fields: [processId], references: [id])

  @@map("notifications")
}

// Modelo de Cliente
model Client {
  id        String    @id @default(uuid())
  name      String
  email     String
  phone     String
  cpf       String    @unique
  status    UserStatus @default(active)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  processes Process[]

  @@map("clients")
}

enum UserRole {
  ADMIN
  LAWYER
  CLIENT
}

enum UserStatus {
  active
  inactive
}

enum ProcessStatus {
  AGUARDANDO
  EM_ANDAMENTO
  ARQUIVADO
  CONCLUIDO
}

enum Priority {
  BAIXA
  MEDIA
  ALTA
  URGENTE
}

enum PaymentType {
  HONORARIOS
  CUSTAS
  CONSULTA
}

enum PaymentStatus {
  PENDENTE
  PAGO
  ATRASADO
  CANCELADO
}

enum TaskStatus {
  PENDENTE
  EM_ANDAMENTO
  CONCLUIDA
}

enum AppointmentType {
  AUDIENCIA
  REUNIAO
  CONSULTA
}

enum AppointmentStatus {
  AGENDADO
  CONFIRMADO
  CANCELADO
  REALIZADO
} 